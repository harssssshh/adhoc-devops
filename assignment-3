#Task-2 
#To Build A Docker Container That Runs Parent Docker Engine As The Container Docker Engine
#Switching To Root

su - root

#Creating A Directory

mkdir mydocker && cd mydocker

#Creating A Dockerfile

nano Dockerfile

## Editing File ###

FROM ubuntu
#Adding Neccessary Dependencies 
RUN apt-get update && apt-get install apt-transport-https ca-certificates  curl  gnupg-agent  software-properties-common -y
#Adding Docker Official GPG Key
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
#Adding Repository Of Docker
RUN add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
#Installing Docker
RUN apt-get update && apt-get install docker-ce docker-ce-cli -y

### Saving It ###

#Creating docker-compose to run build and run the containers

nano docker-compose.yml

### Editing File ###

version: '3.8'
services:
 mydocker:
  build: .
  tty: true
  image: mydocker
  container_name: dockercon
  volumes:
   - /var/run/docker.sock:/var/run/docker.sock
  network_mode: host

### Saving File ###

#Building And Runnning Container
#To Run The Contnainer In Background
docker-compose up --build -d

#Open Shell In The Running Container

docker-compose exec mydocker bash

#Checking Host Images

docker images
docker ps -a


#Task 3
#Automatically Update The Container Whenever The Image Update Occurs

# Switching To Root, Cloning The HTML Content & Creating Dockerfile

su - root
mkdir autoimage && cd autoimage
git clone https://github.com/microsoft/project-html-website.git
mv project-html-website web
nano Dockerfile

### Editing File ###
#Using httpd As Base Image

FROM httpd
COPY ./web/ /usr/local/apache2/htdocs/

### Saving File ###
#Building The Container & Pushing It To Dockerhub & Running The Container
docker build -t harssssshh/autoimage .
docker login
#Add Credentials
docker push harssssshh/autoimage
docker run -itd --name autocont --network host harssssshh/autoimage
#(Browse The Content By localhost Or 127.0.0.1)

#Pulling Watchtower Image 
#(From Watchtower Documentation)
#Watchtower is an application that will monitor your running Docker containers and watch for changes to the images that those containers were originally started from.
#If watchtower detects that an image has changed, it will automatically restart the container using the new image.
docker pull v2tec/watchtower
#Instructing Watchtower To Watch For Container Named autocont
docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock v2tec/watchtower autocont
#(Watchtower Checks for image changes every 5 minutes by default)
# Now In Host System Change The Content (In My Case, Just Editing The Success To Failed In index.html)

cd web
sed -i 's/Success/Failed/g' index.html
cd ..

#Building Image Again & Pushing It
docker build -t harssssshh/autoimage .
docker push harssssshh/autoimage

#Now Watchtower Container Will Automatically Detect The Changes & Rebuilds The Container With New Image
# You Can Check It Out The Logs Of Watchtower By
docker logs watchtower

#Task-4

#To Run Root Commands By A Non-Root User In A Docker Container

#Switching To Root & Creating A Dockerfile

su - root 
mkdir nonroot && cd nonroot
nano Dockerfile

### Editing File ###
#Base Image Ubuntu
FROM ubuntu
RUN apt-get update
#Installing sudo as it is not present by default
RUN apt-get install sudo
#Adding User Named harsh & Skipping the default prcocess of creating a user
RUN adduser --disabled-password --gecos '' harsh
#Adding User To sudo Group
RUN adduser harsh sudo
#Editing Sudo File To Allow Every Non-Root User To Access sudo
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
#Switiching To User harsh
USER harsh
#Trying It With sudo
RUN sudo apt-get update 

### Saving File ###

#Building The Image & Running The Container 

docker build -t nonroot .
docker run -it --name nonrootcont --network host nonroot

#Try Creating A Folder Or Installing Utilities In / Directory Which Is Owned By Root User

whoami
sudo mkdir harsh 
sudo apt-get install apache2 -y
sudo service apache2 start

#(Browse 127.0.0.1 Or localhost to see the content)
